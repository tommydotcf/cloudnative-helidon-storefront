<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (c) 2021 Oracle and/or its affiliates.

The Universal Permissive License (UPL), Version 1.0

Subject to the condition set forth below, permission is hereby granted to any
person obtaining a copy of this software, associated documentation and/or data
(collectively the "Software"), free of charge and under any and all copyright
rights in the Software, and any and all patent rights owned or freely
licensable by each licensor hereunder covering either (i) the unmodified
Software as contributed to or provided by such licensor, or (ii) the Larger
Works (as defined below), to deal in both

(a) the Software, and
(b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
one is included with the Software (each a "Larger Work" to which the Software
is contributed by such licensors),

without restriction, including without limitation the rights to copy, create
derivative works of, display, perform, and distribute the Software and make,
use, sell, offer for sale, import, export, have made, and have sold the
Software and the Larger Work(s), and to sublicense the foregoing rights on
either these or other terms.

This license is subject to the following condition:
The above copyright notice and either this complete permission notice or at
a minimum a reference to the UPL must be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>io.helidon.applications</groupId>
		<artifactId>helidon-mp</artifactId>
		<version>2.4.1</version>
	</parent>
	<properties>
		<mainClass>com.oracle.labs.helidon.storefront.Main</mainClass>
		<maven.compiler.source>17</maven.compiler.source>
		<maven.compiler.target>${maven.compiler.source}</maven.compiler.target>
		<version.lombok>1.18.22</version.lombok>
		<sonar.skip>true</sonar.skip>
	</properties>
	<groupId>com.oracle.labs.helidon</groupId>
	<artifactId>storefront</artifactId>
	<version>${project.parent.version}</version>
	<name>${project.artifactId}</name>

	<dependencies>
		<dependency>
			<groupId>io.helidon.microprofile.bundles</groupId>
			<artifactId>helidon-microprofile</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jboss</groupId>
			<artifactId>jandex</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>jakarta.activation</groupId>
			<artifactId>jakarta.activation-api</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency> <!-- Utilities -->
		<!-- Lombok does the auto method creation -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${version.lombok}</version>
			<scope>provided</scope>
		</dependency>
		<!-- not quite sure why it fails to run withouh this entry, given this package is imported elsewhere, 
          but it seems to fail if this isn't present on my system at least -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
		<!-- SLF4J is a logging facade that let's us change the actual logger used 
			under the covers without changing our code, slf4j-jdk14 is for output to 
			the standard Java logging utilities. By making the dependency declaration 
			below Maven will bring in the core SLF4J jar files, and also the SLJ4J to 
			java.util.logging binding. If the artifact is changed to slf4j-log4j12 then 
			maven will bring in the SLF4J to log4j binding instead This is commented 
			out because Helidon itself brings in slf4j, but if you were using a different 
			version case then you'd need to specify it yourself, to this is here as a 
			placeholder / reminder -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-jdk14</artifactId>
		</dependency>
		<!-- tracing calls -->
		<dependency>
			<groupId>io.helidon.tracing</groupId>
			<artifactId>helidon-tracing-zipkin</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-libs</id>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jboss.jandex</groupId>
				<artifactId>jandex-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>make-index</id>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
				<version>3.1.4</version>
				<configuration>
					<!-- Use the Graal community edition JVM as it'd got better GC and JITC 
						use a bigger base than the distroless java jib uses by defautso we can actually 
						connect to it to fix some of the problems when jib puts things like the jandex.idx 
						file in /resources/META-INF which CDI and WELD can't handle, the distroless 
						base is only java, and we need a shell to run things like cp and rm. Alpine 
						jre only is a lot smaller than the full openjdk:8 image, but does support 
						cp and rm, however it doesn't have all of the Unix type tools in it, so if 
						some are missing go for openjdk:8 here -->
					<from>
						<!-- <image>openjdk:11-jre-alpine</image> OR <image>openjdk:11-jre-slim</image> -->
						<!-- <image>openjdk:11</image> -->
						<image>ghcr.io/graalvm/graalvm-ce:java17-21</image>
						<!--<image>openjdk:17.0.1-jdk</image>-->
					</from>
					<to>
						<image>jib-${project.artifactId}</image>
						<tags>
							<tag>${project.version}</tag>
							<tag>latest</tag>
						</tags>
					</to>
					<container>
						<!-- good defaults intended for containers -->
						<jvmFlags>
							<jmxFlag>-server</jmxFlag>
							<jmxFlag>-Djava.awt.headless=true</jmxFlag>
							<jmxFlag>-XX:+UnlockExperimentalVMOptions</jmxFlag>
							<jmxFlag>-XX:+UseG1GC</jmxFlag>
						</jvmFlags>
						<mainClass>${mainClass}</mainClass>
						<ports>
							<port>8080</port>
							<port>9080</port>
						</ports>
						<volumes>
							<volume>/conf</volume>
							<volume>/confsecure</volume>
						</volumes>
						<extraClasspath>/app/resources</extraClasspath>
					</container>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>dockerBuild</goal>
						</goals>
						<phase>package</phase>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.jboss.jandex
										</groupId>
										<artifactId>
											jandex-maven-plugin
										</artifactId>
										<versionRange>
											[1.0.1,)
										</versionRange>
										<goals>
											<goal>jandex</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>